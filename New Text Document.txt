import React, { useEffect, useState, useRef } from "react"
import MetaTags from "react-meta-tags"
import { withRouter, Link } from "react-router-dom"
import {
  Card,
  CardBody,
  Col,
  Container,
  Row,
  Modal,
  Button,
  ModalHeader,
  ModalBody,
  Label,
  FormFeedback,
  Input,
  Form,
  FormGroup,
} from "reactstrap"
import paginationFactory, {
  PaginationListStandalone,
  PaginationProvider,
} from "react-bootstrap-table2-paginator"
import * as Yup from "yup"
import { useFormik } from "formik"
import ToolkitProvider, { Search } from "react-bootstrap-table2-toolkit"
import BootstrapTable from "react-bootstrap-table-next"

import images from "assets/images"

//Import Breadcrumb
import Breadcrumbs from "components/Common/Breadcrumb"
import DeleteModal from "components/Common/DeleteModal"

import {
  getUsers as onGetUsers,
  addNewUser as onAddNewUser,
  updateUser as onUpdateUser,
  deleteUser as onDeleteUser,
} from "store/contacts/actions"
import { isEmpty, size, map } from "lodash"

//redux
import { useSelector, useDispatch } from "react-redux"
import {
  addUser,
  getAgentChercheur,
  getAgentSuperviseur,
  getalluser,
} from "store/user/user_action"

const listeAgentSuperviseur = props => {
  const dispatch = useDispatch()
  const [contact, setContact] = useState()
  // validation
  const validation = useFormik({
    // enableReinitialize : use this flag when initial values needs to be changed
    enableReinitialize: true,

    initialValues: {
      name: "",
      lastName: "",
      numTel: "",
      email: "",
      cin: "",
      role: "agentSuperviseur",
      birthday: "",
      delFlag: false,
      username: "",
      password: "",
      confirmpass: "",
      address: "",
      createAt: "",
    },
    validationSchema: Yup.object({
      name: Yup.string().min(5).required("svp entrez votre nom "),
      lastName: Yup.string().min(5).required("svp entrez votre prenom"),
      birthday: Yup.string()
        .min(8)
        .required("svp entrez votre date de naissance"),

      numTel: Yup.number()
        .min(20000000)
        .max(99999999)
        .required("svp enterz votre numero de portable"),
      email: Yup.string().min(6).email().required("svp entrez votre email"),
      address: Yup.string().required("svp entrez votre Adresse"),
      cin: Yup.string()
        .min(8)
        .max(8)
        .matches(/^\d+$/)
        .required("svp entrez votre  CIN"),
      username: Yup.string().required("svp entrez votre nom utilisateur "),
      password: Yup.string()
        .required("svp entrez votre mot de passe ")
        .min(
          8,
          "Mot de passe trop court - doit comporter au moins 8 caracteres."
        )
        .matches(
          /[a-zA-Z]/,
          "le mot de passe ne peut contenir que des lettres latines"
        ),

      confirmpass: Yup.string()
        .min(6)
        .oneOf(
          [Yup.ref("password"), null],
          "Le mot de passe doivent correspondre"
        )
        .required("svp confirmee votre mot de passe"),
    }),
    onSubmit: values => {
      console.log("on submit ", values)
      if (isEdit) {
        console.log("on edit ")

        const updateUser = {
          firstName: values.firstName,
          name: values.name,
          designation: values.designation,
          tags: values.tags,
          email: values.email,
          projects: values.projects,
        }

        // update user
        dispatch(onUpdateUser(updateUser))
        validation.resetForm()
        setIsEdit(false)
      } else {
        console.log("on ajout ")

        const newUser = {
          name: values["name"],
          email: values["email"],
          lastName: values["lastName"],
          numTel: values["numTel"],
          cin: values["cin"],
          role: "agentSuperviseur",
          birthday: values["birthday"],
          delFlag: false,
          username: values["username"],
          password: values["password"],
          address: values["address"],
        }
        // save new user
        dispatch(addUser(newUser))
      }
      toggle()
    },
  })

  const { users } = useSelector(state => ({
    users: state.User_reducer.listSuperviseur,
  }))
  const [userList, setUserList] = useState()
  const [modal, setModal] = useState(false)
  const [isEdit, setIsEdit] = useState(false)

  const { SearchBar } = Search
  const sizePerPage = 10
  const pageOptions = {
    sizePerPage: sizePerPage,
    totalSize: users.length, // replace later with size(users),
    custom: true,
  }
  const defaultSorted = [
    {
      dataField: "id", // if dataField is not match to any column you defined, it will be ignored.
      order: "desc", // desc or asc
    },
  ]

  const selectRow = {
    mode: "checkbox",
  }

  const contactListColumns = [
    {
      text: "id",
      dataField: "id",
      sort: true,
      hidden: true,
      // eslint-disable-next-line react/display-name
      formatter: user => <>{user.id}</>,
    },
    {
      dataField: "img",
      text: "#",
      // eslint-disable-next-line react/display-name
      formatter: (cellContent, user) => (
        <>
          {!user.img ? (
            <div className="avatar-xs">
              <span className="avatar-title rounded-circle">
                {user.name.charAt(0)}
              </span>
            </div>
          ) : (
            <div>
              <img
                className="rounded-circle avatar-xs"
                src={images[user.img]}
                alt=""
              />
            </div>
          )}
        </>
      ),
    },
    {
      text: "Nom",
      dataField: "Nom",
      sort: true,
      // eslint-disable-next-line react/display-name
      formatter: (cellContent, user) => (
        <>
          <h5 className="font-size-14 mb-1">
            <Link to="#" className="text-dark">
              {user.name}
            </Link>
          </h5>
          <p className="text-muted mb-0">{user.name}</p>
        </>
      ),
    },
    {
      dataField: "lastName",
      text: "Prenom",
      sort: true,
    },
    {
      dataField: "numTel",
      text: "Numero de portable",
      sort: true,
    },
    {
      dataField: "email",
      text: "Email",
      sort: true,
    },
    {
      dataField: "address",
      text: "Adress",
      sort: true,
    },

    {
      dataField: "cin",
      text: "Cin",
      sort: true,
    },

    {
      dataField: "username",
      text: "Nom d'utilisateur",
      sort: true,
    },
    {
      dataField: "DateCreation",
      text: "DateCreation",
      sort: true,
    },
    {
      dataField: "menu",
      isDummyField: true,
      editable: false,
      text: "Action",
      // eslint-disable-next-line react/display-name
      formatter: (cellContent, user) => (
        <div className="d-flex gap-3">
          <Link className="text-success" to="#">
            <i
              className="mdi mdi-pencil font-size-18"
              id="edittooltip"
              onClick={() => handleUserClick(user)}
            ></i>
          </Link>
          <Link className="text-danger" to="#">
            <i
              className="mdi mdi-delete font-size-18"
              id="deletetooltip"
              onClick={() => onClickDelete(user)}
            ></i>
          </Link>
        </div>
      ),
    },
  ]
  let i = 0
  useEffect(() => {
    if (users && !users.length && i < 5) {
      i++
      dispatch(getAgentSuperviseur())
      setIsEdit(false)
    }
  }, [dispatch, users])

  useEffect(() => {
    setContact(users)
    setIsEdit(false)
  }, [users])

  useEffect(() => {
    if (!isEmpty(users) && !!isEdit) {
      setContact(users)
      setIsEdit(false)
    }
  }, [users])

  const toggle = () => {
    setModal(!modal)
  }

  const handleUserClick = arg => {
    const user = arg

    setContact({
      id: user.id,
      name: user.name,
      designation: user.designation,
      email: user.email,
      tags: user.tags,
      projects: user.projects,
    })
    setIsEdit(true)

    toggle()
  }

  var node = useRef()
  const onPaginationPageChange = page => {
    if (
      node &&
      node.current &&
      node.current.props &&
      node.current.props.pagination &&
      node.current.props.pagination.options
    ) {
      node.current.props.pagination.options.onPageChange(page)
    }
  }

  //delete customer
  const [deleteModal, setDeleteModal] = useState(false)

  const onClickDelete = users => {
    setContact(users)
    setDeleteModal(true)
  }

  const handleDeleteUser = () => {
    dispatch(onDeleteUser(contact))
    onPaginationPageChange(1)
    setDeleteModal(false)
  }

  const handleUserClicks = () => {
    setUserList("")
    setIsEdit(false)
    toggle()
  }

  const keyField = "id"
  //state of the modal
  ///State register

  const [register, setRegister] = useState({
    firstName: "",
    prenom: "",
    phone: "",
    email: "",
    Adresse: "",
    cin: "",
    Role: "user",
    datenaissance: "",
    DelFlag: false,
    nom_utilisateur: "",
    motpasse: "",
  })

  const change = e => {
    setRegister({ ...register, [e.target.name]: e.target.value })
  }
  const reset = () => {
    setRegister({
      name: "",
      lastName: "",
      numTel: "",
      email: "",
      address: "",
      cin: "",
      role: "agent commercial",
      birthday: "",
      delFlag: false,
      username: "",
      surface: "",
      password: "",
      createAt: "",
    })
  }

  return (
    <React.Fragment>
      <DeleteModal
        show={deleteModal}
        onDeleteClick={handleDeleteUser}
        onCloseClick={() => setDeleteModal(false)}
      />
      <div className="page-content">
        <MetaTags>
          <title> | Skote - React Admin & Dashboard Template</title>
        </MetaTags>
        <Container fluid>
          {/* Render Breadcrumbs */}
          <Breadcrumbs
            title="Agents Superviseur"
            breadcrumbItem="La Liste des Agents Superviseur"
          />
          <Row>
            <Col lg="12">
              <Card>
                <CardBody>
                  <PaginationProvider
                    pagination={paginationFactory(pageOptions)}
                    keyField={keyField}
                    columns={contactListColumns}
                    data={users}
                  >
                    {({ paginationProps, paginationTableProps }) => {
                      return (
                        <ToolkitProvider
                          keyField={keyField}
                          data={users}
                          columns={contactListColumns}
                          bootstrap4
                          search
                        >
                          {toolkitProps => (
                            <React.Fragment>
                              <Row className="mb-2">
                                <Col sm="4">
                                  <div className="search-box ms-2 mb-2 d-inline-block">
                                    <div className="position-relative">
                                      <SearchBar
                                        {...toolkitProps.searchProps}
                                      />
                                      <i className="bx bx-search-alt search-icon" />
                                    </div>
                                  </div>
                                </Col>
                                <Col sm="8">
                                  <div className="text-sm-end">
                                    <Button
                                      color="primary"
                                      className="font-16 btn-block btn btn-primary"
                                      onClick={handleUserClicks}
                                    >
                                      <i className="mdi mdi-plus-circle-outline me-1" />
                                      Creer un nouveau Agent Superviseur
                                    </Button>
                                  </div>
                                </Col>
                              </Row>
                              <Row>
                                <Col xl="12">
                                  <div className="table-responsive">
                                    <BootstrapTable
                                      keyField={keyField}
                                      {...toolkitProps.baseProps}
                                      {...paginationTableProps}
                                      selectRow={selectRow}
                                      defaultSorted={defaultSorted}
                                      classes={
                                        "table align-middle table-nowrap table-hover"
                                      }
                                      bordered={false}
                                      striped={false}
                                      responsive
                                      ref={node}
                                    />

                                    <Modal isOpen={modal} toggle={toggle}>
                                      <ModalHeader toggle={toggle} tag="h4">
                                        {!!isEdit
                                          ? "Modifier AgentSuperviseur "
                                          : "Ajout AgentSuperviseur"}
                                      </ModalHeader>
                                      <ModalBody>
                                        <Form
                                          onSubmit={e => {
                                            e.preventDefault()
                                            validation.handleSubmit()
                                            return false
                                          }}
                                        >
                                          <Row>
                                            <Col md="6">
                                              <FormGroup className="mb-3">
                                                <Label htmlFor="validationCustom01">
                                                  Nom
                                                </Label>
                                                <Input
                                                  name="name"
                                                  placeholder="Votre nom"
                                                  type="text"
                                                  className="form-control"
                                                  id="validationCustom01"
                                                  onChange={
                                                    validation.handleChange
                                                  }
                                                  onBlur={validation.handleBlur}
                                                  value={
                                                    validation.values.name || ""
                                                  }
                                                  invalid={
                                                    validation.touched.name &&
                                                    validation.errors.name
                                                      ? true
                                                      : false
                                                  }
                                                />
                                                {validation.touched.name &&
                                                validation.errors.name ? (
                                                  <FormFeedback type="invalid">
                                                    {validation.errors.name}
                                                  </FormFeedback>
                                                ) : null}
                                              </FormGroup>
                                            </Col>
                                            <Col md="6">
                                              <FormGroup className="mb-3">
                                                <Label htmlFor="validationCustom02">
                                                  Prenom
                                                </Label>
                                                <Input
                                                  name="lastName"
                                                  placeholder="Prenom"
                                                  type="text"
                                                  className="form-control"
                                                  id="validationCustom02"
                                                  onChange={
                                                    validation.handleChange
                                                  }
                                                  onBlur={validation.handleBlur}
                                                  value={
                                                    validation.values
                                                      .lastName || ""
                                                  }
                                                  invalid={
                                                    validation.touched
                                                      .lastName &&
                                                    validation.errors.lastName
                                                      ? true
                                                      : false
                                                  }
                                                />
                                                {validation.touched.lastName &&
                                                validation.errors.lastName ? (
                                                  <FormFeedback type="invalid">
                                                    {validation.errors.lastName}
                                                  </FormFeedback>
                                                ) : null}
                                              </FormGroup>
                                            </Col>
                                          </Row>
                                          <Row>
                                            <Col md="6">
                                              <FormGroup className="mb-3">
                                                <Label htmlFor="validationCustom03">
                                                  portable
                                                </Label>
                                                <Input
                                                  name="numTel"
                                                  placeholder="Numero de portable"
                                                  type="text"
                                                  className="form-control"
                                                  onChange={
                                                    validation.handleChange
                                                  }
                                                  onBlur={validation.handleBlur}
                                                  value={
                                                    validation.values.numTel ||
                                                    ""
                                                  }
                                                  invalid={
                                                    validation.touched.numTel &&
                                                    validation.errors.numTel
                                                      ? true
                                                      : false
                                                  }
                                                />
                                                {validation.touched.numTel &&
                                                validation.errors.numTel ? (
                                                  <FormFeedback type="invalid">
                                                    {validation.errors.numTel}
                                                  </FormFeedback>
                                                ) : null}
                                              </FormGroup>
                                            </Col>
                                            <Col md="6">
                                              <FormGroup className="mb-3">
                                                <Label htmlFor="validationCustom12">
                                                  Email
                                                </Label>
                                                <Input
                                                  name="email"
                                                  placeholder="Email"
                                                  type="text"
                                                  className="form-control"
                                                  id="validationCustom12"
                                                  onChange={
                                                    validation.handleChange
                                                  }
                                                  onBlur={validation.handleBlur}
                                                  value={
                                                    validation.values.email ||
                                                    ""
                                                  }
                                                  invalid={
                                                    validation.touched.email &&
                                                    validation.errors.email
                                                      ? true
                                                      : false
                                                  }
                                                />
                                                {validation.touched.email &&
                                                validation.errors.email ? (
                                                  <FormFeedback type="invalid">
                                                    {validation.errors.email}
                                                  </FormFeedback>
                                                ) : null}
                                              </FormGroup>
                                            </Col>
                                            <Col md="12">
                                              <FormGroup className="mb-3">
                                                <Label htmlFor="validationCustom15">
                                                  Adresse
                                                </Label>
                                                <Input
                                                  name="address"
                                                  placeholder="Adresse"
                                                  type="text"
                                                  className="form-control"
                                                  id="validationCustom15"
                                                  onChange={
                                                    validation.handleChange
                                                  }
                                                  onBlur={validation.handleBlur}
                                                  value={
                                                    validation.values.address ||
                                                    ""
                                                  }
                                                  invalid={
                                                    validation.touched
                                                      .address &&
                                                    validation.errors.address
                                                      ? true
                                                      : false
                                                  }
                                                />
                                                {validation.touched.address &&
                                                validation.errors.address ? (
                                                  <FormFeedback type="invalid">
                                                    {validation.errors.address}
                                                  </FormFeedback>
                                                ) : null}
                                              </FormGroup>
                                            </Col>
                                          </Row>
                                          <Row>
                                            <Col md="6">
                                              <FormGroup className="mb-3">
                                                <Label htmlFor="validationCustom03">
                                                  cin
                                                </Label>
                                                <Input
                                                  name="cin"
                                                  placeholder="cin"
                                                  type="text"
                                                  className="form-control"
                                                  onChange={
                                                    validation.handleChange
                                                  }
                                                  onBlur={validation.handleBlur}
                                                  value={
                                                    validation.values.cin || ""
                                                  }
                                                  invalid={
                                                    validation.touched.cin &&
                                                    validation.errors.cin
                                                      ? true
                                                      : false
                                                  }
                                                />
                                                {validation.touched.cin &&
                                                validation.errors.cin ? (
                                                  <FormFeedback type="invalid">
                                                    {validation.errors.cin}
                                                  </FormFeedback>
                                                ) : null}
                                              </FormGroup>
                                            </Col>

                                            <Col md="6">
                                              <FormGroup className="mb-3">
                                                <Label htmlFor="validationCustom04">
                                                  Nom utilisateur
                                                </Label>
                                                <Input
                                                  name="username"
                                                  placeholder="Nom utilisateur"
                                                  type="text"
                                                  className="form-control"
                                                  id="validationCustom04"
                                                  onChange={
                                                    validation.handleChange
                                                  }
                                                  onBlur={validation.handleBlur}
                                                  value={
                                                    validation.values
                                                      .username || ""
                                                  }
                                                  invalid={
                                                    validation.touched
                                                      .username &&
                                                    validation.errors.username
                                                      ? true
                                                      : false
                                                  }
                                                />
                                                {validation.touched.username &&
                                                validation.errors.username ? (
                                                  <FormFeedback type="invalid">
                                                    {validation.errors.username}
                                                  </FormFeedback>
                                                ) : null}
                                              </FormGroup>
                                            </Col>
                                            <Col md="6">
                                              <FormGroup className="mb-3">
                                                <Label htmlFor="validationCustom25">
                                                  Mot de Passe
                                                </Label>
                                                <Input
                                                  name="password"
                                                  placeholder="Mot de Passe"
                                                  type="password"
                                                  className="form-control"
                                                  id="validationCustom25"
                                                  onChange={
                                                    validation.handleChange
                                                  }
                                                  onBlur={validation.handleBlur}
                                                  value={
                                                    validation.values
                                                      .password || ""
                                                  }
                                                  invalid={
                                                    validation.touched
                                                      .password &&
                                                    validation.errors.password
                                                      ? true
                                                      : false
                                                  }
                                                />
                                                {validation.touched.password &&
                                                validation.errors.password ? (
                                                  <FormFeedback type="invalid">
                                                    {validation.errors.password}
                                                  </FormFeedback>
                                                ) : null}
                                              </FormGroup>
                                            </Col>
                                            <Col md="6">
                                              <FormGroup className="mb-3">
                                                <Label htmlFor="validationCustom05">
                                                  Confirmee Mot de passe
                                                </Label>
                                                <Input
                                                  name="confirmpass"
                                                  placeholder="confirm mot de passe"
                                                  type="password"
                                                  className="form-control"
                                                  id="validationCustom05"
                                                  onChange={
                                                    validation.handleChange
                                                  }
                                                  onBlur={validation.handleBlur}
                                                  value={
                                                    validation.values
                                                      .confirmpass || ""
                                                  }
                                                  invalid={
                                                    validation.touched
                                                      .confirmpass &&
                                                    validation.errors
                                                      .confirmpass
                                                      ? true
                                                      : false
                                                  }
                                                />
                                                {validation.touched
                                                  .confirmpass &&
                                                validation.errors
                                                  .confirmpass ? (
                                                  <FormFeedback type="invalid">
                                                    {
                                                      validation.errors
                                                        .confirmpass
                                                    }
                                                  </FormFeedback>
                                                ) : null}
                                              </FormGroup>
                                            </Col>
                                          </Row>

                                          <Row>
                                            <Col>
                                              <div className="text-end">
                                                <button
                                                  type="submit"
                                                  className="btn btn-success save-user"
                                                >
                                                  Save
                                                </button>
                                              </div>
                                            </Col>
                                          </Row>
                                          {/* <button type="reset"> Reset</button> */}
                                        </Form>
                                      </ModalBody>
                                    </Modal>
                                  </div>
                                </Col>
                              </Row>
                              <Row className="align-items-md-center mt-30">
                                <Col className="pagination pagination-rounded justify-content-end mb-2">
                                  <PaginationListStandalone
                                    {...paginationProps}
                                  />
                                </Col>
                              </Row>
                            </React.Fragment>
                          )}
                        </ToolkitProvider>
                      )
                    }}
                  </PaginationProvider>
                </CardBody>
              </Card>
            </Col>
          </Row>
        </Container>
      </div>
    </React.Fragment>
  )
}

export default withRouter(listeAgentSuperviseur)
